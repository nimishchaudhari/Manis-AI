{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { TaskAssignment, StatusUpdate, CoTLog } from '@acme/shared-mcp';\r\nimport { RabbitMQConfig, Logger, createLogger } from '@acme/shared-utils';\r\nimport { AgentService } from '@acme/agent-template';\r\n\r\ninterface EchoAgentConfig {\r\n  rabbitmq: RabbitMQConfig;\r\n  agentId: string;\r\n  taskQueue: string;\r\n}\r\n\r\nexport class EchoAgent extends AgentService {\r\n  constructor(config: EchoAgentConfig) {\r\n    super(config.rabbitmq, config.agentId, config.taskQueue);\r\n  }\r\n\r\n  async handleTask(task: TaskAssignment): Promise<void> {\r\n    try {\r\n      this.logger.info(`Handling task: ${task.taskId} for job: ${task.jobId}`);\r\n      await this.sendStatusUpdate({\r\n        status: 'in-progress',\r\n        message: 'Echo Agent started processing task',\r\n      });\r\n\r\n      const result = await this.executeTask(task);\r\n\r\n      await this.sendStatusUpdate({\r\n        status: 'completed',\r\n        message: 'Echo Agent completed task',\r\n        result,\r\n      });\r\n\r\n      await this.sendCoTLog({\r\n        step: 'Task completed',\r\n        details: { result },\r\n      });\r\n    } catch (error: any) {\r\n      this.logger.error(`Error executing task: ${task.taskId}`, error);\r\n      await this.sendStatusUpdate({\r\n        status: 'failed',\r\n        message: `Echo Agent failed to execute task: ${error.message}`,\r\n        error: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  async executeTask(task: TaskAssignment): Promise<unknown> {\r\n    this.logger.info(`Executing task: ${task.taskId} for job: ${task.jobId}`);\r\n    return task.parameters; // Echo back the parameters\r\n  }\r\n}\r\n\r\n// Example usage (for local testing)\r\nasync function main() {\r\n  const config: EchoAgentConfig = {\r\n    rabbitmq: {\r\n      url: 'amqp://guest:guest@localhost:5672', // Replace with your RabbitMQ URL\r\n    },\r\n    agentId: 'echo-agent',\r\n    taskQueue: 'agent.echo.tasks',\r\n  };\r\n\r\n  const agent = new EchoAgent(config);\r\n  await agent.initialize();\r\n  await agent.start();\r\n\r\n  // Keep the agent running\r\n  console.log('Echo Agent running... Press Ctrl+C to exit');\r\n}\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  main().catch(console.error);\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,4BAA6B;AAQtB,IAAM,YAAN,cAAwB,mCAAa;AAAA,EAC1C,YAAY,QAAyB;AACnC,UAAM,OAAO,UAAU,OAAO,SAAS,OAAO,SAAS;AAAA,EACzD;AAAA,EAEA,MAAM,WAAW,MAAqC;AACpD,QAAI;AACF,WAAK,OAAO,KAAK,kBAAkB,KAAK,MAAM,aAAa,KAAK,KAAK,EAAE;AACvE,YAAM,KAAK,iBAAiB;AAAA,QAC1B,QAAQ;AAAA,QACR,SAAS;AAAA,MACX,CAAC;AAED,YAAM,SAAS,MAAM,KAAK,YAAY,IAAI;AAE1C,YAAM,KAAK,iBAAiB;AAAA,QAC1B,QAAQ;AAAA,QACR,SAAS;AAAA,QACT;AAAA,MACF,CAAC;AAED,YAAM,KAAK,WAAW;AAAA,QACpB,MAAM;AAAA,QACN,SAAS,EAAE,OAAO;AAAA,MACpB,CAAC;AAAA,IACH,SAAS,OAAY;AACnB,WAAK,OAAO,MAAM,yBAAyB,KAAK,MAAM,IAAI,KAAK;AAC/D,YAAM,KAAK,iBAAiB;AAAA,QAC1B,QAAQ;AAAA,QACR,SAAS,sCAAsC,MAAM,OAAO;AAAA,QAC5D,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,MAAM,YAAY,MAAwC;AACxD,SAAK,OAAO,KAAK,mBAAmB,KAAK,MAAM,aAAa,KAAK,KAAK,EAAE;AACxE,WAAO,KAAK;AAAA,EACd;AACF;AAGA,eAAe,OAAO;AACpB,QAAM,SAA0B;AAAA,IAC9B,UAAU;AAAA,MACR,KAAK;AAAA;AAAA,IACP;AAAA,IACA,SAAS;AAAA,IACT,WAAW;AAAA,EACb;AAEA,QAAM,QAAQ,IAAI,UAAU,MAAM;AAClC,QAAM,MAAM,WAAW;AACvB,QAAM,MAAM,MAAM;AAGlB,UAAQ,IAAI,4CAA4C;AAC1D;AAEA,IAAI,QAAQ,IAAI,aAAa,cAAc;AACzC,OAAK,EAAE,MAAM,QAAQ,KAAK;AAC5B;","names":[]}