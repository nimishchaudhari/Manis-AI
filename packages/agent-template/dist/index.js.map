{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import amqplib, { Channel } from 'amqplib';\r\nimport { TaskAssignment, StatusUpdate, CoTLog } from '@acme/shared-mcp';\r\nimport { RabbitMQConfig, RabbitMQClient, Logger, createLogger } from '@acme/shared-utils';\r\n\r\nexport interface IAgent {\r\n  /**\r\n   * Initializes the agent, connects to message bus, registers capabilities.\r\n   */\r\n  initialize(): Promise<void>;\r\n\r\n  /**\r\n   * Starts listening for tasks on the message bus.\r\n   */\r\n  start(): Promise<void>;\r\n\r\n  /**\r\n   * Handles an incoming task assignment. This is typically called by the message bus listener.\r\n   * @param task The task assignment details.\r\n   */\r\n  handleTask(task: TaskAssignment): Promise<void>;\r\n\r\n  /**\r\n   * Performs the actual work for the task.\r\n   * @param task The task assignment details.\r\n   * @returns The result of the task execution.\r\n   */\r\n  executeTask(task: TaskAssignment): Promise<unknown>;\r\n\r\n  /**\r\n   * Sends a status update message via the message bus.\r\n   * @param update The status update payload.\r\n   */\r\n  sendStatusUpdate(update: Omit<StatusUpdate, 'timestamp' | 'jobId' | 'taskId'> & Partial<Pick<StatusUpdate, 'error'>>): Promise<void>; // Auto-fill common fields\r\n\r\n  /**\r\n   * Sends a Chain-of-Thought log message via the message bus.\r\n   * @param log The CoT log payload.\r\n   */\r\n  sendCoTLog(log: Omit<CoTLog, 'timestamp' | 'jobId' | 'taskId' | 'agentId'>): Promise<void>; // Auto-fill common fields\r\n\r\n  /**\r\n   * Gracefully shuts down the agent.\r\n   */\r\n  shutdown(): Promise<void>;\r\n}\r\n\r\nexport abstract class AgentService implements IAgent {\r\n  protected config: RabbitMQConfig;\r\n  protected logger: Logger;\r\n  protected rabbitMQClient: RabbitMQClient;\r\n  protected channel: amqplib.Channel | null = null;\r\n  protected agentId: string;\r\n  protected taskQueue: string;\r\n\r\n  constructor(config: RabbitMQConfig, agentId: string, taskQueue: string) {\r\n    this.config = config;\r\n    this.logger = createLogger(`agent-${agentId}`);\r\n    this.rabbitMQClient = new RabbitMQClient(this.config, this.logger);\r\n    this.agentId = agentId;\r\n    this.taskQueue = taskQueue;\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    await this.rabbitMQClient.connect();\r\n    if (this.channel) {\r\n        this.channel = this.rabbitMQClient.getChannel();\r\n        await this.channel?.assertQueue(this.taskQueue, { durable: true });\r\n    }\r\n    this.logger.info(`Agent ${this.agentId} initialized and listening for tasks on queue: ${this.taskQueue}`);\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    if (this.channel) {\r\n      this.channel.consume(this.taskQueue, async (msg: any) => {\r\n        if (msg) {\r\n          try {\r\n            const task: TaskAssignment = JSON.parse(msg.content.toString());\r\n            this.logger.info(`Received task: ${task.taskId} for job: ${task.jobId}`);\r\n            await this.handleTask(task);\r\n            this.channel?.ack(msg);\r\n          } catch (error: any) {\r\n            this.logger.error(`Error processing message: ${error.message}`, error);\r\n            this.channel?.nack(msg, false, false); // Reject and don't requeue\r\n          }\r\n        }\r\n      }, { noAck: false });\r\n    }\r\n  }\r\n\r\n  abstract handleTask(task: TaskAssignment): Promise<void>;\r\n  abstract executeTask(task: TaskAssignment): Promise<unknown>;\r\n\r\n  async sendStatusUpdate(update: Omit<StatusUpdate, 'timestamp' | 'jobId' | 'taskId'> & Partial<Pick<StatusUpdate, 'error'>>): Promise<void> {\r\n    const jobId = 'test-job-id'; // Replace with actual jobId\r\n    const taskId = 'test-task-id'; // Replace with actual taskId\r\n    const statusUpdate: StatusUpdate = {\r\n      jobId,\r\n      taskId,\r\n      ...update,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n    const channel = this.rabbitMQClient.getChannel();\r\n    channel.publish('status', `agent.${this.agentId}.status`, Buffer.from(JSON.stringify(statusUpdate)));\r\n    this.logger.info(`Sent status update: ${statusUpdate.status} for task: ${taskId} job: ${jobId}`);\r\n  }\r\n\r\n  async sendCoTLog(log: Omit<CoTLog, 'timestamp' | 'jobId' | 'taskId' | 'agentId'>): Promise<void> {\r\n    const jobId = 'test-job-id'; // Replace with actual jobId\r\n    const taskId = 'test-task-id'; // Replace with actual taskId\r\n    const coTLog: CoTLog = {\r\n      agentId: this.agentId,\r\n      jobId,\r\n      taskId,\r\n      ...log,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n    const channel = this.rabbitMQClient.getChannel();\r\n    channel.publish('logs', `agent.${this.agentId}.logs`,  Buffer.from(JSON.stringify(coTLog)));\r\n    this.logger.info(`Sent CoT log for task: ${taskId} job: ${jobId}`);\r\n  }\r\n\r\n  async shutdown(): Promise<void> {\r\n    await this.rabbitMQClient.close();\r\n    this.logger.info(`Agent ${this.agentId} shut down`);\r\n  }\r\n}"],"mappings":";AAEA,SAAyB,gBAAwB,oBAAoB;AA4C9D,IAAe,eAAf,MAA8C;AAAA,EACzC;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAkC;AAAA,EAClC;AAAA,EACA;AAAA,EAEV,YAAY,QAAwB,SAAiB,WAAmB;AACtE,SAAK,SAAS;AACd,SAAK,SAAS,aAAa,SAAS,OAAO,EAAE;AAC7C,SAAK,iBAAiB,IAAI,eAAe,KAAK,QAAQ,KAAK,MAAM;AACjE,SAAK,UAAU;AACf,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,MAAM,aAA4B;AAChC,UAAM,KAAK,eAAe,QAAQ;AAClC,QAAI,KAAK,SAAS;AACd,WAAK,UAAU,KAAK,eAAe,WAAW;AAC9C,YAAM,KAAK,SAAS,YAAY,KAAK,WAAW,EAAE,SAAS,KAAK,CAAC;AAAA,IACrE;AACA,SAAK,OAAO,KAAK,SAAS,KAAK,OAAO,kDAAkD,KAAK,SAAS,EAAE;AAAA,EAC1G;AAAA,EAEA,MAAM,QAAuB;AAC3B,QAAI,KAAK,SAAS;AAChB,WAAK,QAAQ,QAAQ,KAAK,WAAW,OAAO,QAAa;AACvD,YAAI,KAAK;AACP,cAAI;AACF,kBAAM,OAAuB,KAAK,MAAM,IAAI,QAAQ,SAAS,CAAC;AAC9D,iBAAK,OAAO,KAAK,kBAAkB,KAAK,MAAM,aAAa,KAAK,KAAK,EAAE;AACvE,kBAAM,KAAK,WAAW,IAAI;AAC1B,iBAAK,SAAS,IAAI,GAAG;AAAA,UACvB,SAAS,OAAY;AACnB,iBAAK,OAAO,MAAM,6BAA6B,MAAM,OAAO,IAAI,KAAK;AACrE,iBAAK,SAAS,KAAK,KAAK,OAAO,KAAK;AAAA,UACtC;AAAA,QACF;AAAA,MACF,GAAG,EAAE,OAAO,MAAM,CAAC;AAAA,IACrB;AAAA,EACF;AAAA,EAKA,MAAM,iBAAiB,QAAoH;AACzI,UAAM,QAAQ;AACd,UAAM,SAAS;AACf,UAAM,eAA6B;AAAA,MACjC;AAAA,MACA;AAAA,MACA,GAAG;AAAA,MACH,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IACpC;AACA,UAAM,UAAU,KAAK,eAAe,WAAW;AAC/C,YAAQ,QAAQ,UAAU,SAAS,KAAK,OAAO,WAAW,OAAO,KAAK,KAAK,UAAU,YAAY,CAAC,CAAC;AACnG,SAAK,OAAO,KAAK,uBAAuB,aAAa,MAAM,cAAc,MAAM,SAAS,KAAK,EAAE;AAAA,EACjG;AAAA,EAEA,MAAM,WAAW,KAAgF;AAC/F,UAAM,QAAQ;AACd,UAAM,SAAS;AACf,UAAM,SAAiB;AAAA,MACrB,SAAS,KAAK;AAAA,MACd;AAAA,MACA;AAAA,MACA,GAAG;AAAA,MACH,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IACpC;AACA,UAAM,UAAU,KAAK,eAAe,WAAW;AAC/C,YAAQ,QAAQ,QAAQ,SAAS,KAAK,OAAO,SAAU,OAAO,KAAK,KAAK,UAAU,MAAM,CAAC,CAAC;AAC1F,SAAK,OAAO,KAAK,0BAA0B,MAAM,SAAS,KAAK,EAAE;AAAA,EACnE;AAAA,EAEA,MAAM,WAA0B;AAC9B,UAAM,KAAK,eAAe,MAAM;AAChC,SAAK,OAAO,KAAK,SAAS,KAAK,OAAO,YAAY;AAAA,EACpD;AACF;","names":[]}