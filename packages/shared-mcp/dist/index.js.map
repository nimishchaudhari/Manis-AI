{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { z } from 'zod';\r\n\r\n// Schema for task assignment messages\r\nexport const TaskAssignmentSchema = z.object({\r\n  jobId: z.string().uuid(),\r\n  taskId: z.string().uuid(),\r\n  taskType: z.string(),\r\n  description: z.string(),\r\n  parameters: z.record(z.unknown()),\r\n  dependencies: z.array(z.string().uuid()).optional(),\r\n  context: z.record(z.unknown()).optional(),\r\n});\r\n\r\nexport type TaskAssignment = z.infer<typeof TaskAssignmentSchema>;\r\n\r\n// Schema for status updates\r\nexport const StatusUpdateSchema = z.object({\r\n  jobId: z.string().uuid(),\r\n  taskId: z.string().uuid(),\r\n  status: z.enum(['pending', 'queued', 'in-progress', 'completed', 'failed', 'retrying']),\r\n  message: z.string().optional(),\r\n  result: z.unknown().optional(),\r\n  error: z.string().optional(), // Add error field\r\n  timestamp: z.string().datetime(),\r\n});\r\n\r\nexport type StatusUpdate = z.infer<typeof StatusUpdateSchema>;\r\n\r\n// Schema for chain-of-thought logs\r\nexport const CoTLogSchema = z.object({\r\n  jobId: z.string().uuid(),\r\n  taskId: z.string().uuid(),\r\n  agentId: z.string(),\r\n  step: z.string(),\r\n  details: z.record(z.unknown()).optional(),\r\n  timestamp: z.string().datetime(),\r\n});\r\n\r\nexport type CoTLog = z.infer<typeof CoTLogSchema>;\r\n\r\n// Schema for Agent Capability Registration\r\nexport const AgentCapabilitySchema = z.object({\r\n  agentId: z.string(),\r\n  capabilities: z.array(z.string()),\r\n  timestamp: z.string().datetime(),\r\n});\r\n\r\nexport type AgentCapability = z.infer<typeof AgentCapabilitySchema>;\r\n\r\n// Export all schemas and types\r\nexport const MCPSchemas = {\r\n  TaskAssignment: TaskAssignmentSchema,\r\n  StatusUpdate: StatusUpdateSchema,\r\n  CoTLog: CoTLogSchema,\r\n  AgentCapability: AgentCapabilitySchema,\r\n} as const;\r\n\r\n// Utility type for all MCP message types\r\nexport type MCPMessage = \r\n  | { type: 'TaskAssignment'; payload: TaskAssignment }\r\n  | { type: 'StatusUpdate'; payload: StatusUpdate }\r\n  | { type: 'CoTLog'; payload: CoTLog }\r\n  | { type: 'AgentCapability'; payload: AgentCapability };"],"mappings":";AAAA,SAAS,SAAS;AAGX,IAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,OAAO,EAAE,OAAO,EAAE,KAAK;AAAA,EACvB,QAAQ,EAAE,OAAO,EAAE,KAAK;AAAA,EACxB,UAAU,EAAE,OAAO;AAAA,EACnB,aAAa,EAAE,OAAO;AAAA,EACtB,YAAY,EAAE,OAAO,EAAE,QAAQ,CAAC;AAAA,EAChC,cAAc,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE,SAAS;AAAA,EAClD,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,SAAS;AAC1C,CAAC;AAKM,IAAM,qBAAqB,EAAE,OAAO;AAAA,EACzC,OAAO,EAAE,OAAO,EAAE,KAAK;AAAA,EACvB,QAAQ,EAAE,OAAO,EAAE,KAAK;AAAA,EACxB,QAAQ,EAAE,KAAK,CAAC,WAAW,UAAU,eAAe,aAAa,UAAU,UAAU,CAAC;AAAA,EACtF,SAAS,EAAE,OAAO,EAAE,SAAS;AAAA,EAC7B,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA;AAAA,EAC3B,WAAW,EAAE,OAAO,EAAE,SAAS;AACjC,CAAC;AAKM,IAAM,eAAe,EAAE,OAAO;AAAA,EACnC,OAAO,EAAE,OAAO,EAAE,KAAK;AAAA,EACvB,QAAQ,EAAE,OAAO,EAAE,KAAK;AAAA,EACxB,SAAS,EAAE,OAAO;AAAA,EAClB,MAAM,EAAE,OAAO;AAAA,EACf,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,SAAS;AAAA,EACxC,WAAW,EAAE,OAAO,EAAE,SAAS;AACjC,CAAC;AAKM,IAAM,wBAAwB,EAAE,OAAO;AAAA,EAC5C,SAAS,EAAE,OAAO;AAAA,EAClB,cAAc,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EAChC,WAAW,EAAE,OAAO,EAAE,SAAS;AACjC,CAAC;AAKM,IAAM,aAAa;AAAA,EACxB,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,QAAQ;AAAA,EACR,iBAAiB;AACnB;","names":[]}